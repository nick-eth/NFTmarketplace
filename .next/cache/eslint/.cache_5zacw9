[{"C:\\Users\\nickw\\nft-marketplace\\pages\\api\\hello.js":"1","C:\\Users\\nickw\\nft-marketplace\\pages\\create-item.js":"2","C:\\Users\\nickw\\nft-marketplace\\pages\\creator-dashboard.js":"3","C:\\Users\\nickw\\nft-marketplace\\pages\\index.js":"4","C:\\Users\\nickw\\nft-marketplace\\pages\\my-assets.js":"5","C:\\Users\\nickw\\nft-marketplace\\pages\\_app.js":"6"},{"size":170,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3850,"mtime":1633812338427,"results":"9","hashOfConfig":"8"},{"size":3337,"mtime":1633813260351,"results":"10","hashOfConfig":"8"},{"size":3155,"mtime":1647342274839,"results":"11","hashOfConfig":"8"},{"size":2293,"mtime":1633813036377,"results":"12","hashOfConfig":"8"},{"size":968,"mtime":1647351551473,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"105p76j",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nickw\\nft-marketplace\\pages\\api\\hello.js",[],"C:\\Users\\nickw\\nft-marketplace\\pages\\create-item.js",["30","31"],"import { useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport { useRouter } from 'next/router'\r\nimport Web3Modal from 'web3modal'\r\n\r\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nimport {\r\n  nftaddress, nftmarketaddress\r\n} from '../config'\r\n\r\nimport NFT from '../artifacts/contracts/NFT.sol/NFT.json'\r\nimport Market from '../artifacts/contracts/NFTMarket.sol/NFTMarket.json'\r\n\r\nexport default function CreateItem () {\r\n  const [fileUrl, setFileUrl] = useState(null)\r\n  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })\r\n  const router = useRouter()\r\n\r\n  async function onChange(e) {\r\n    const file = e.target.files[0]\r\n    try {\r\n      const added = await client.add(\r\n        file,\r\n        {\r\n          progress: (prog) => console.log(`received: ${prog}`)\r\n        }\r\n      )\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      setFileUrl(url)\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error)\r\n    }  \r\n  }\r\n  async function createItem() {\r\n    const { name, description, price } = formInput\r\n    if (!name || !description || !price || !fileUrl) return\r\n    /* first, upload to IPFS */\r\n    const data = JSON.stringify({\r\n      name, description, image: fileUrl\r\n    })\r\n    try {\r\n      const added = await client.add(data)\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      /* after file is uploaded to IPFS, pass the URL to save it on Polygon */\r\n      createSale(url)\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error)\r\n    }  \r\n  }\r\n\r\n  async function createSale(url) {\r\n    const web3Modal = new Web3Modal()\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)    \r\n    const signer = provider.getSigner()\r\n    \r\n    /* next, create the item */\r\n    let contract = new ethers.Contract(nftaddress, NFT.abi, signer)\r\n    let transaction = await contract.createToken(url)\r\n    let tx = await transaction.wait()\r\n    let event = tx.events[0]\r\n    let value = event.args[2]\r\n    let tokenId = value.toNumber()\r\n\r\n    const price = ethers.utils.parseUnits(formInput.price, 'ether')\r\n  \r\n    /* then list the item for sale on the marketplace */\r\n    contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\r\n    let listingPrice = await contract.getListingPrice()\r\n    listingPrice = listingPrice.toString()\r\n\r\n    transaction = await contract.createMarketItem(nftaddress, tokenId, price, { value: listingPrice })\r\n    await transaction.wait()\r\n    router.push('/')\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"w-1/2 flex flex-col pb-12\">\r\n        <input \r\n          placeholder=\"Asset Name\"\r\n          className=\"mt-8 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n        />\r\n        <textarea\r\n          placeholder=\"Asset Description\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n        />\r\n        <input\r\n          placeholder=\"Asset Price in Eth\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          name=\"Asset\"\r\n          className=\"my-4\"\r\n          onChange={onChange}\r\n        />\r\n        {\r\n          fileUrl && (\r\n            <img className=\"rounded mt-4\" width=\"350\" src={fileUrl} />\r\n          )\r\n        }\r\n        <button onClick={createItem} className=\"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\">\r\n          Create Digital Asset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\nickw\\nft-marketplace\\pages\\creator-dashboard.js",["32","33","34","35"],"import { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Web3Modal from \"web3modal\"\r\n\r\nimport {\r\n  nftmarketaddress, nftaddress\r\n} from '../config'\r\n\r\nimport Market from '../artifacts/contracts/NFTMarket.sol/NFTMarket.json'\r\nimport NFT from '../artifacts/contracts/NFT.sol/NFT.json'\r\n\r\nexport default function CreatorDashboard() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [sold, setSold] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const web3Modal = new Web3Modal({\r\n      network: \"mainnet\",\r\n      cacheProvider: true,\r\n    })\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n      \r\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\r\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\r\n    const data = await marketContract.fetchItemsCreated()\r\n    \r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenUri)\r\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\r\n      let item = {\r\n        price,\r\n        tokenId: i.tokenId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        sold: i.sold,\r\n        image: meta.data.image,\r\n      }\r\n      return item\r\n    }))\r\n    /* create a filtered array of items that have been sold */\r\n    const soldItems = items.filter(i => i.sold)\r\n    setSold(soldItems)\r\n    setNfts(items)\r\n    setLoadingState('loaded') \r\n  }\r\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"py-10 px-20 text-3xl\">No assets created</h1>)\r\n  return (\r\n    <div>\r\n      <div className=\"p-4\">\r\n        <h2 className=\"text-2xl py-2\">Items Created</h2>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\r\n          {\r\n            nfts.map((nft, i) => (\r\n              <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                <img src={nft.image} className=\"rounded\" />\r\n                <div className=\"p-4 bg-black\">\r\n                  <p className=\"text-2xl font-bold text-white\">Price - {nft.price} Eth</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n        <div className=\"px-4\">\r\n        {\r\n          Boolean(sold.length) && (\r\n            <div>\r\n              <h2 className=\"text-2xl py-2\">Items sold</h2>\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\r\n                {\r\n                  sold.map((nft, i) => (\r\n                    <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                      <img src={nft.image} className=\"rounded\" />\r\n                      <div className=\"p-4 bg-black\">\r\n                        <p className=\"text-2xl font-bold text-white\">Price - {nft.price} Eth</p>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n        </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\nickw\\nft-marketplace\\pages\\index.js",["36","37"],"import { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Web3Modal from \"web3modal\"\n\nimport {\n  nftaddress, nftmarketaddress\n} from '../config'\n\nimport NFT from '../artifacts/contracts/NFT.sol/NFT.json'\nimport Market from '../artifacts/contracts/NFTMarket.sol/NFTMarket.json'\n\nexport default function Home() {\n  const [nfts, setNfts] = useState([])\n  const [loadingState, setLoadingState] = useState('not-loaded')\n  useEffect(() => {\n    loadNFTs()\n  }, [])\n  async function loadNFTs() {    \n    const provider = new ethers.providers.JsonRpcProvider(\"https://rpc-mumbai.matic.today\")\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, provider)\n    const data = await marketContract.fetchMarketItems()\n    \n    const items = await Promise.all(data.map(async i => {\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\n      const meta = await axios.get(tokenUri)\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.data.image,\n        name: meta.data.name,\n        description: meta.data.description,\n      }\n      return item\n    }))\n    setNfts(items)\n    setLoadingState('loaded') \n  }\n  async function buyNft(nft) {\n    const web3Modal = new Web3Modal()\n    const connection = await web3Modal.connect()\n    const provider = new ethers.providers.Web3Provider(connection)\n    const signer = provider.getSigner()\n    const contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n\n    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')\n    const transaction = await contract.createMarketSale(nftaddress, nft.tokenId, {\n      value: price\n    })\n    await transaction.wait()\n    loadNFTs()\n  }\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"px-20 py-10 text-3xl\">No items in marketplace</h1>)\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"px-4\" style={{ maxWidth: '1600px' }}>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\n          {\n            nfts.map((nft, i) => (\n              <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\n                <img src={nft.image} />\n                <div className=\"p-4\">\n                  <p style={{ height: '64px' }} className=\"text-2xl font-semibold\">{nft.name}</p>\n                  <div style={{ height: '70px', overflow: 'hidden' }}>\n                    <p className=\"text-gray-400\">{nft.description}</p>\n                  </div>\n                </div>\n                <div className=\"p-4 bg-black\">\n                  <p className=\"text-2xl mb-4 font-bold text-white\">{nft.price} ETH</p>\n                  <button className=\"w-full bg-pink-500 text-white font-bold py-2 px-12 rounded\" onClick={() => buyNft(nft)}>Buy</button>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n}","C:\\Users\\nickw\\nft-marketplace\\pages\\my-assets.js",["38","39"],"import { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Web3Modal from \"web3modal\"\r\n\r\nimport {\r\n  nftmarketaddress, nftaddress\r\n} from '../config'\r\n\r\nimport Market from '../artifacts/contracts/NFTMarket.sol/NFTMarket.json'\r\nimport NFT from '../artifacts/contracts/NFT.sol/NFT.json'\r\n\r\nexport default function MyAssets() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const web3Modal = new Web3Modal({\r\n      network: \"mainnet\",\r\n      cacheProvider: true,\r\n    })\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n      \r\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\r\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\r\n    const data = await marketContract.fetchMyNFTs()\r\n    \r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenUri)\r\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\r\n      let item = {\r\n        price,\r\n        tokenId: i.tokenId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        image: meta.data.image,\r\n      }\r\n      return item\r\n    }))\r\n    setNfts(items)\r\n    setLoadingState('loaded') \r\n  }\r\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"py-10 px-20 text-3xl\">No assets owned</h1>)\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"p-4\">\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\r\n          {\r\n            nfts.map((nft, i) => (\r\n              <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                <img src={nft.image} className=\"rounded\" />\r\n                <div className=\"p-4 bg-black\">\r\n                  <p className=\"text-2xl font-bold text-white\">Price - {nft.price} Eth</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\nickw\\nft-marketplace\\pages\\_app.js",[],{"ruleId":"40","severity":1,"message":"41","line":105,"column":13,"nodeType":"42","endLine":105,"endColumn":71},{"ruleId":"43","severity":1,"message":"44","line":105,"column":13,"nodeType":"42","endLine":105,"endColumn":71},{"ruleId":"40","severity":1,"message":"41","line":62,"column":17,"nodeType":"42","endLine":62,"endColumn":60},{"ruleId":"43","severity":1,"message":"44","line":62,"column":17,"nodeType":"42","endLine":62,"endColumn":60},{"ruleId":"40","severity":1,"message":"41","line":80,"column":23,"nodeType":"42","endLine":80,"endColumn":66},{"ruleId":"43","severity":1,"message":"44","line":80,"column":23,"nodeType":"42","endLine":80,"endColumn":66},{"ruleId":"40","severity":1,"message":"41","line":65,"column":17,"nodeType":"42","endLine":65,"endColumn":40},{"ruleId":"43","severity":1,"message":"44","line":65,"column":17,"nodeType":"42","endLine":65,"endColumn":40},{"ruleId":"40","severity":1,"message":"41","line":56,"column":17,"nodeType":"42","endLine":56,"endColumn":60},{"ruleId":"43","severity":1,"message":"44","line":56,"column":17,"nodeType":"42","endLine":56,"endColumn":60},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]